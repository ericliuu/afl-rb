
#!/bin/bash
#$1 input_len.data
#$2	mutation_mask.data
#$3 mutation_mask_bit_level.data
#$4 mutation_mask_row_by_row					mm_row
#$5 mutation_mask_bit_level_row_by_row			mm_b_row
#$6 mutation_mask_processed						mm_p
#$7 mutation_mask_bit_level_processed			mm_b_p
#$8 mutation_mask_processed_sorted				mm_p_s
#$9 mutation_mask_bit_level_processed_sorted	mm_b_p_s


rm -f $4
rm -f $5
rm -f $6
rm -f $7
rm -f $8
rm -f $9

total=0
for len in $(cut -d ':' -f 1 $1)
do
	echo "len: $(($len+1))"
	xxd -c 100000 -s $total -l $(($len+1)) -ps $2 >> $4
	total=$(($total+$(($len+1))))
	echo "total: $total"
done

total=0
for len in $(cut -d ':' -f 1 $1)
do
	echo "len: $(($len*8+1))"
	xxd -c 100000 -s $total -l $(($len*8+1)) -ps $3 >> $5
	total=$(($total+$(($len*8+1))))
	echo "total: $total"
done


for line in $(cat $4)
do
	len_half_bytes=0	# Num of half-bytes
	len_bytes=0 # Num of bytes
	total=0 # Num of bits
	total_minus_always_zero=0 # Num of bits minus those that's always zero/not used
	total_ones=0 # Num of bits that's 1
	total_O=0 # Num of bits that's allowing Overide / 0001
	total_D=0 # Num of bits that's allowing Delete / 0010
	total_I=0 # Num of bits that's allowing Insert / 0100
	while read -n1 ch; do
		case $ch in			
			1)	# 0001
			total_ones=$(($total_ones+1))
			total_O=$(($total_O+1))
			;;
			
			2)	# 0010
			total_ones=$(($total_ones+1))
			total_D=$(($total_D+1))
			;;
			
			3)	# 0011
			total_ones=$(($total_ones+2))
			total_O=$(($total_O+1))
			total_D=$(($total_D+1))
			;;
			
			4)	# 0100
			total_ones=$(($total_ones+1))
			total_I=$(($total_I+1))
			;;
			
			5)	# 0101
			total_ones=$(($total_ones+2))
			total_O=$(($total_O+1))
			total_I=$(($total_I+1))
			;;
			
			6)	# 0110
			total_ones=$(($total_ones+2))
			total_D=$(($total_D+1))
			total_I=$(($total_I+1))
			;;
			
			7)	# 0111
			total_ones=$(($total_ones+3))
			total_O=$(($total_O+1))
			total_D=$(($total_D+1))
			total_I=$(($total_I+1))
			;;
			
			# Won't be used / shouldn't be used since only 3 bits matters
			8)	# 1000
			total_ones=$(($total_ones+1))
			;;
			
			9)	# 1001
			total_ones=$(($total_ones+2))
			;;
			
			a|A)# 1010
			total_ones=$(($total_ones+2))
			;;
			
			b|B)# 1011
			total_ones=$(($total_ones+3))
			;;
			
			c|C)# 1100
			total_ones=$(($total_ones+2))
			;;
			
			d|D)# 1101
			total_ones=$(($total_ones+3))
			;;
			
			e|E)# 1110
			total_ones=$(($total_ones+3))
			;;
			
			f|F)# 1111
			total_ones=$(($total_ones+4))
			;;
			
			*)  # 0000
			total_ones=$(($total_ones+0))
			;;
		esac
		total=$(($total+4))
		len_half_bytes=$(($len_half_bytes+1))
	done < <(echo -n "$line")
	len_bytes=$(($len_half_bytes/2)) # Number of bytes
	total_minus_always_zero=$(($total-$len_bytes*5)) # 5 bits per byte not used
	echo "Bytes: $len_bytes  ###  Octets: $len_half_bytes  ###  Bits: $total  ###  Bits_less_0: $total_minus_always_zero  ###  Overwrites: $total_O  ###  Deletes: $total_D  ###  Inserts: $total_I  ###  Bits_1: $total_ones"
	echo "Bytes: $len_bytes  ###  Octets: $len_half_bytes  ###  Bits: $total  ###  Bits_less_0: $total_minus_always_zero  ###  Overwrites: $total_O  ###  Deletes: $total_D  ###  Inserts: $total_I  ###  Bits_1: $total_ones" >> $6
done

for line in $(cat $5)
do
	len_half_bytes=0	# Num of half-bytes
	len_bytes=0 		# Num of bytes, each byte represents a bit
	total_O=0
	total_D=0
	total_I=0
	while read -n1 ch; do
		case $ch in			
			1)	# 0001
			total_O=$(($total_O+1))
			;;
			2)	# 0010
			total_D=$(($total_D+1))
			;;
			3)	# 0011
			total_O=$(($total_O+1))
			total_D=$(($total_D+1))
			;;
			*)  # 0000
			;;
		esac
		len_half_bytes=$(($len_half_bytes+1))
	done < <(echo -n "$line")
	len_bytes=$(($len_half_bytes/2)) # Number of bytes
	echo "Bits: $len_bytes  ###  Bits_less_0: $len_bytes  ###  Overwrites: $total_O  ###  Deletes: $total_D  ###  Inserts: $total_I"
	echo "Bits: $len_bytes  ###  Bits_less_0: $len_bytes  ###  Overwrites: $total_O  ###  Deletes: $total_D  ###  Inserts: $total_I" >> $7
done



cat $6 | sort -n -k2 > $8
cat $7 | sort -n -k1 > $9






